library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity TEST_DMIC is
  port (
    CLK       : in std_logic;  
    NRST      : in std_logic;  
    TX        : out STD_LOGIC;    
    TOGGLE    : out STD_LOGIC;    
    MIC1_IN   : in std_logic;
    MIC2_IN   : in std_logic;
    MIC3_IN   : in std_logic
  );
end TEST_DMIC;

architecture behavioral of TEST_DMIC is
    signal mic1        : std_logic;
    signal mic2        : std_logic;
    signal mic3        : std_logic;
    signal data_pack   : std_logic_vector(2 downto 0);
    
    -- เพิ่มตัวนับเพื่อเก็บเวลาปัจจุบัน
    signal time_counter : unsigned(31 downto 0) := (others => '0'); -- 32-bit counter for time (microseconds)

    -- สัญญาณเพื่อเก็บเวลาของแต่ละไมโครโฟนเมื่อเป็น '1'
    signal mic1_time    : unsigned(31 downto 0) := (others => '0');
    signal mic2_time    : unsigned(31 downto 0) := (others => '0');
    signal mic3_time    : unsigned(31 downto 0) := (others => '0');

    component UART_DIGITAL is
        Port ( 
           CLK       : in  STD_LOGIC;
           NRST      : in  STD_LOGIC;     
           TX        : out STD_LOGIC;     
           TOGGLE    : out STD_LOGIC;     
           DATA_IN   : in  STD_LOGIC_VECTOR(2 downto 0)    
        );
    end component;

begin

    uart_instance: UART_DIGITAL
        port map (
            CLK    => CLK,
            NRST   => NRST,
            TX     => TX,
            TOGGLE => TOGGLE,
            DATA_IN => data_pack
        );

    -- กระบวนการนับเวลา
    process (CLK, NRST)
    begin
        if NRST = '0' then
            time_counter <= (others => '0'); -- รีเซ็ตตัวนับเวลาเมื่อ NRST เป็น 0
            mic1 <= '0';
            mic2 <= '0';
            mic3 <= '0';
            mic1_time <= (others => '0');
            mic2_time <= (others => '0');
            mic3_time <= (others => '0');
            
        elsif rising_edge(CLK) then
            -- เพิ่มตัวนับเวลาทุก ๆ รอบสัญญาณนาฬิกา
            time_counter <= time_counter + 1;

            -- อ่านค่าไมโครโฟนและบันทึกเวลาที่ค่าเปลี่ยนเป็น '1'
            mic1 <= MIC1_IN;
            mic2 <= MIC2_IN;
            mic3 <= MIC3_IN;

            -- บันทึกเวลาสำหรับไมโครโฟนแต่ละตัวเมื่อสัญญาณเป็น '1'
            if mic1 = '0' and MIC1_IN = '1' then
                mic1_time <= time_counter; -- บันทึกเวลาสำหรับ MIC1
            end if;

            if mic2 = '0' and MIC2_IN = '1' then
                mic2_time <= time_counter; -- บันทึกเวลาสำหรับ MIC2
            end if;

            if mic3 = '0' and MIC3_IN = '1' then
                mic3_time <= time_counter; -- บันทึกเวลาสำหรับ MIC3
            end if;

            -- ส่งค่าไมโครโฟนปัจจุบันไปที่ data_pack
            data_pack(2) <= mic1;
            data_pack(1) <= mic2;
            data_pack(0) <= mic3;
        end if;
    end process;

end behavioral;
