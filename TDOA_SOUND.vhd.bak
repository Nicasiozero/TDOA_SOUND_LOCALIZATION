library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity TDOA_SOUND is
  port (
    CLK       : in std_logic; 
    NRST      : in std_logic; 
    ADC_CSN   : out std_logic;
    ADC_SCLK  : out std_logic;
    ADC_MOSI  : out std_logic;
    ADC_MISO  : in std_logic;
    LEDS      : out std_logic_vector(7 downto 0) 
  );
end TDOA_SOUND;

architecture Behavioral of TDOA_SOUND is

  component ADC_READER
    port (
      CLK       : in std_logic;
      NRST      : in std_logic;
      ADC_CSN   : out std_logic;
      ADC_SCLK  : out std_logic;
      ADC_MOSI  : out std_logic;
      ADC_MISO  : in std_logic;  
      CHANNEL   : in std_logic_vector(2 downto 0);
      ADC_OUT   : out std_logic_vector(11 downto 0)
    );
  end component;

  signal adc_out   : std_logic_vector(11 downto 0);
  signal channel   : std_logic_vector(2 downto 0);
  
  signal adc_out1 : std_logic_vector(11 downto 0);
  signal adc_out2 : std_logic_vector(11 downto 0);
  signal adc_out3 : std_logic_vector(11 downto 0);
  
  type state_type is (ST_CH0, ST_CH1, ST_CH2);
  signal state : state_type := ST_CH0;


begin

  adc_instance: ADC_READER
    port map (
      CLK       => CLK,
      NRST      => NRST,
      ADC_CSN   => ADC_CSN,
      ADC_SCLK  => ADC_SCLK,
      ADC_MOSI  => ADC_MOSI,
      ADC_MISO  => ADC_MISO,
      CHANNEL   => channel,
      ADC_OUT   => adc_out
    );

  process (CLK)
    variable value : integer range 0 to 255;
    variable leds_on : integer range 0 to 7;
  begin
    if rising_edge(CLK) then
      case state is
        when ST_CH0 =>
          channel <= "000";
			 adc_out1 <= adc_out;	 
			 state <= ST_CH1;

        when ST_CH1 =>
          channel <= "010";  
          adc_out2 <= adc_out;
          state <= ST_CH2;

        when ST_CH2 =>
          channel <= "111";  
          adc_out3 <= adc_out;
          state <= ST_CH0;

        when others =>
          state <= ST_CH0;
      end case;

      value := to_integer(unsigned(adc_out3(11 downto 4)));   
      leds_on := value / 32;

      LEDS <= (others => '0');
      LEDS(leds_on downto 0) <= (others => '1');
    end if;
  end process;

end Behavioral;